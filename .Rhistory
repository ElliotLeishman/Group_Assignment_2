# Question 6 - Unique function
a1<- tolower(a)## removes capital letters from a
uniq <- unique(a1) ## Vector of unique words - noting that unique does not
## mean unique in the intuitive definition, it simply removes duplicate words,
## and thus contains all the words that appear at least once in a (the Bible)
m <- match(a1,uniq) ##Contains the indices of the unique words in uniq that
tabulate(m) ## calculates the frequency (number of times) that each (unique)
f1=sort(tabulate(m), decreasing = TRUE)[500]
b1=uniq[which(tabulate(m)>f1)]
# Reading in the text file for the bible and removing license documentation
# and verse numbers
a <- scan("pg10.txt",what="character",skip=104) ## skip contents
n <- length(a)
a <- a[-((n-2886):n)] ## strip license
a <- a[-grep("[0123456789]:[0123456789]",a)] ## strip out verse numbers
# Question 4 - Defining split_punct function.
split_punct <- function(words, punct) { ## Our split_punct function takes 2
## inputs, the vector of words (in our case this will be the Bible), and the
## punctuation mark we wish to separate from the words.
punct_loc <- grep(punct, words, fixed= TRUE); ## Creates a vector with the
## indexes of words with the desired punctuation mark.
nwords <- gsub(punct,"",words,fixed=TRUE)# Removes punctuation mark from words
a2 <- rep(" ", length(words) + length(punct_loc)) # Empty vector to hold new
## words, eventually this will become the output.
loc <- punct_loc+1:length(punct_loc) ## Vector to store where to add the
## punctuation into output vector a2.
a2[-loc] <-  nwords ## Insert un-punctuated words into output vector a2.
a2[loc] <- punct ## Insert punctuation marks in desired locations
output <- a2 ## Output the updated list
}
punct_vector <- c("," , ".", ";","!",":","?") ## Create a vector of the
## punctuation points we wish to remove.
for (i in punct_vector){ ## Run split_punct function for all entries in
## punct_vector
a <- split_punct(a,i)
}
# Question 6 - Unique function
a1<- tolower(a)## removes capital letters from a
uniq <- unique(a1) ## Vector of unique words - noting that unique does not
## mean unique in the intuitive definition, it simply removes duplicate words,
## and thus contains all the words that appear at least once in a (the Bible)
m <- match(a1,uniq) ##Contains the indices of the unique words in uniq that
tabulate(m) ## calculates the frequency (number of times) that each (unique)
f1=sort(tabulate(m), decreasing = TRUE)[500]
b1=uniq[which(tabulate(m)>f1)]
# Reading in the text file for the bible and removing license documentation
# and verse numbers
a <- scan("pg10.txt",what="character",skip=104) ## skip contents
# Reading in the text file for the bible and removing license documentation
# and verse numbers
a <- scan("pg10.txt",what="character",skip=104) ## skip contents
n <- length(a)
a <- a[-((n-2886):n)] ## strip license
a <- a[-grep("[0123456789]:[0123456789]",a)] ## strip out verse numbers
# Question 4 - Defining split_punct function.
split_punct <- function(words, punct) { ## Our split_punct function takes 2
## inputs, the vector of words (in our case this will be the Bible), and the
## punctuation mark we wish to separate from the words.
punct_loc <- grep(punct, words, fixed= TRUE); ## Creates a vector with the
## indexes of words with the desired punctuation mark.
nwords <- gsub(punct,"",words,fixed=TRUE)# Removes punctuation mark from words
a2 <- rep(" ", length(words) + length(punct_loc)) # Empty vector to hold new
## words, eventually this will become the output.
loc <- punct_loc+1:length(punct_loc) ## Vector to store where to add the
## punctuation into output vector a2.
a2[-loc] <-  nwords ## Insert un-punctuated words into output vector a2.
a2[loc] <- punct ## Insert punctuation marks in desired locations
output <- a2 ## Output the updated list
}
punct_vector <- c("," , ".", ";","!",":","?") ## Create a vector of the
## punctuation points we wish to remove.
for (i in punct_vector){ ## Run split_punct function for all entries in
## punct_vector
a <- split_punct(a,i)
}
# Question 6 - Unique function
a1<- tolower(a)## removes capital letters from a
uniq <- unique(a1) ## Vector of unique words - noting that unique does not
## mean unique in the intuitive definition, it simply removes duplicate words,
## and thus contains all the words that appear at least once in a (the Bible)
m <- match(a1,uniq) ##Contains the indices of the unique words in uniq that
tabulate(m) ## calculates the frequency (number of times) that each (unique)
f1=sort(tabulate(m), decreasing = TRUE)[500]
b1=uniq[which(tabulate(m)>f1)]
# Reading in the text file for the bible and removing license documentation
# and verse numbers
a <- scan("pg10.txt",what="character",skip=104) ## skip contents
# Reading in the text file for the bible and removing license documentation
# and verse numbers
a <- scan("pg10.txt",what="character",skip=104) ## skip contents
# Reading in the text file for the bible and removing license documentation
# and verse numbers
a <- scan("pg10.txt",what="character",skip=104) ## skip contents
# Reading in the text file for the bible and removing license documentation
# and verse numbers
a <- scan("pg10.txt",what="character",skip=104) ## skip contents
# Reading in the text file for the bible and removing license documentation
# and verse numbers
a <- scan("pg10.txt",what="character",skip=104) ## skip contents
numbers
numbers
numbers
# Reading in the text file for the bible and removing license documentation
# and verse numbers
a <- scan("pg10.txt",what="character",skip=104) ## skip contents
# Reading in the text file for the bible and removing license documentation
# and verse numbers
a <- scan("pg10.txt",what="character",skip=104) ## skip contents
source("~/Group-Assignment-1/Group_Assignment_1.R")
source("~/Group-Assignment-1/Group_Assignment_1.R")
box_values <- sample(1:(2*n), 2 * n, replace = FALSE)
n = 35
## Define the strategies
box_values <- sample(1:(2*n), 2 * n, replace = FALSE)
k = 4
# list of opened boxes
choice <- 1:n
choice[1] <- box_values[k]
for (i in 1:n){
choice[i+1] <- box_values[choice[i]]
}
cat(choice)
#  strat_2 <-
b <- sample(1:(2*n), 2 * n, replace = FALSE)
k <- sample(1:(2*n), 1, replace = FALSE)
# list of opened boxes
choice <- 1:n
choice[1] <- b[k]
for (i in 1:n){
choice[i+1] <- b[choice[i]]
}
cat(choice)
## Define the strategies
box_values <- sample(1:(2*n), 2 * n, replace = FALSE)
k = 4
# list of opened boxes
choice <- 1:n
choice[1] <- box_values[k]
for (i in 1:n){
choice[i+1] <- box_values[choice[i]]
}
cat(choice)
## Define the strategies
box_values <- sample(1:(2*n), 2 * n, replace = FALSE)
k = 4
# list of opened boxes
choice <- 1:n
choice[1] <- box_values[k]
for (i in 1:n){
choice[i+1] <- box_values[choice[i]]
}
cat(choice)
#  strat_2 <-
b <- sample(1:(2*n), 2 * n, replace = FALSE)
k <- sample(1:(2*n), 1, replace = FALSE)
# list of opened boxes
choice <- 1:n
choice[1] <- b[k]
for (i in 1:n){
choice[i+1] <- b[choice[i]]
}
cat(choice)
#  strat_2 <-
b <- sample(1:(2*n), 2 * n, replace = FALSE)
k <- sample(1:(2*n), 1, replace = FALSE)
# list of opened boxes
choice <- 1:n
choice[1] <- b[k]
for (i in 1:n){
choice[i+1] <- b[choice[i]]
}
cat(choice)
#  strat_2 <-
b <- sample(1:(2*n), 2 * n, replace = FALSE)
k <- sample(1:(2*n), 1, replace = FALSE)
# list of opened boxes
choice <- 1:n
choice[1] <- b[k]
for (i in 1:n){
choice[i+1] <- b[choice[i]]
}
cat(choice)
simulation_experiment <- function (b,k,strategy){
box_values <- b
n=length(b)/2
choice <- c() # Generates the choice of boxes the prisoner will take depending on the strategy
if (strategy == 1){
choice[1] <- box_values[k]
i=1
while (choice[i]!=k && i<=n){
choice[i+1] <- box_values[choice[i]]
i=i+1
}
}
if (strategy == 2){
random <- sample(1:(2*n), 1, replace = FALSE)
choice[1] <- box_values[random]
i=1
while ((choice[i]!=k) && (i<=n)){
choice[i+1] <- box_values[choice[i]]
i=i+1
}
}
if (strategy == 3){
choice <-box_values[sample(1:(2*n),n, replace = FALSE)]
}
return (k %in% choice)
}
pone <- function(n, k, strategy, nreps){
count = 0 # initialise counter
for (i in 1:nreps){
b <- sample(1:(2*n), 2 * n, replace = FALSE)
if (simulation_experiment(b,k,strategy)==TRUE){
count=count+1
}
}
count=count/nreps
return (count)
}
pall <-  function(n, strategy, nreps){
count=0
for (i in 1:nreps){
b <- sample(1:(2*n), 2 * n, replace = FALSE)
k=1
while (simulation_experiment(b,k,strategy)==TRUE && k<2*n){
k=k+1
}
if (k==2*n){
count=count+1
}
}
count=count/nreps
return (count)
}
dloops <- function(n,nreps){
p=rep(0,2*n)
nloops=0
for (i in 1:nreps){
b <- sample(1:(2*n), 2 * n, replace = FALSE)
I=list()
for (k in 1:(2*n)){
l=1
s=b[k]
if (!s%in%I){
if (s==k){
I=append(I,s)
nloops=nloops+1
p[l]=p[l]+1
}
else{
while (s!=k){
l=l+1
I=append(I,s)
s=b[s]
}
nloops=nloops+1
p[l]=p[l]+1
}
}
}
}
p=p/nloops
return (p)
cat(p)
}
dloops(50,10000)
dloops(50,100)
R<-dloops(50,100)
sum(R)
R
R
R
dloops(50,100)
dloops(50,100)
dloops(50,100)
b <- sample(1:(200), 200, replace = FALSE)
unique(b)
b <-sample(1:(200), 200, replace = FALSE)
ub<-unique(b)
print(b)
print(ub)
b <-sample(1:(200), 200, replace = FALSE)
ub<-unique(b)
print(b)
print(ub)
b <-sample(1:(200), 200, replace = TRUE)
ub<-unique(b)
print(b)
print(ub)
dloops <- function(n,nreps){
p=rep(0,2*n)
nloops=0
for (i in 1:nreps){
b <- sample(1:(2*n), 2 * n, replace = TRUE)
I=list()
for (k in 1:(2*n)){
l=1
s=b[k]
if (!s%in%I){
if (s==k){
I=append(I,s)
nloops=nloops+1
p[l]=p[l]+1
}
else{
while (s!=k){
l=l+1
I=append(I,s)
s=b[s]
}
nloops=nloops+1
p[l]=p[l]+1
}
}
}
}
p=p/nloops
return (p)
cat(p)
}
R<-dloops(50,100)
p=rep(0,2*n)
dloops <- function(n,nreps){
p=rep(0,2*n)
nloops=0
for (i in 1:nreps){
b <- sample(1:(2*n), 2 * n, replace = TRUE)
I=list()
for (k in 1:(2*n)){
l=1
s=b[k]
if (!s%in%I){
if (s==k){
I=append(I,s)
nloops=nloops+1
p[l]=p[l]+1
}
else{
while (s!=k){
l=l+1
I=append(I,s)
s=b[s]
}
nloops=nloops+1
p[l]=p[l]+1
}
}
}
}
p=p/nloops
return (p)
cat(p)
}
R<-dloops(50,100)
dloops <- function(n,nreps){
p=rep(0,2*n)
nloops=0
for (i in 1:nreps){
b <- sample(1:(2*n), 2 * n, replace = FALSE)
I=list()
for (k in 1:(2*n)){
l=1
s=b[k]
if (!s%in%I){
if (s==k){
I=append(I,s)
nloops=nloops+1
p[l]=p[l]+1
}
else{
while (s!=k){
l=l+1
I=append(I,s)
s=b[s]
}
nloops=nloops+1
p[l]=p[l]+1
}
}
}
}
p=p/nloops
return (p)
cat(p)
}
R<-dloops(50,100)
print(R)
sum(R)
print(R)
b <-sample(1:(200), 200, replace = TRUE)
ub<-unique(b)
print(b)
print(ub)
mb<-(b,ub)
mb <- match(b,ub)
print(mb)
mb <- match(ub,b)
print(b)
print(ub)
print(mb)
b <-sample(1:(200), 200, replace = TRUE)
ub<-unique(b)
print(b)
print(ub)
b <-sample(1:(200), 200, replace = TRUE)
b <-sample(1:(200), 200, replace = TRUE)
mb<- match(b,b)
print(mb)
b <-sample(1:(200), 200, replace = FALSE)
b
setwd("~/Group_Assignment_2")
b <-sample(1:(200), 200, replace = FALSE)
b
dloops <- function(n,nreps){
p=rep(0,2*n)
nloops=0
for (i in 1:nreps){
b <- sample(1:(2*n), 2 * n, replace = FALSE)
I=list()
for (k in 1:(2*n)){
l=1
s=b[k]
if (!s%in%I){
if (s==k){
I=append(I,s)
nloops=nloops+1
p[l]=p[l]+1
}
else{
while (s!=k){
l=l+1
I=append(I,s)
s=b[s]
}
nloops=nloops+1
p[l]=p[l]+1
}
}
}
}
p=p/nloops
return (p)
cat(p)
}
dloops(50,1000)
sum(p)
dloops <- function(n,nreps){
p=rep(0,2*n)
nloops=0
for (i in 1:nreps){
b <- sample(1:(2*n), 2 * n, replace = FALSE)
I=list()
for (k in 1:(2*n)){
l=1
s=b[k]
if (!s%in%I){
if (s==k){
I=append(I,s)
nloops=nloops+1
p[l]=p[l]+1
}
else{
while (s!=k){
l=l+1
I=append(I,s)
s=b[s]
}
nloops=nloops+1
p[l]=p[l]+1
}
}
}
}
p=p/sum(p)
return (p)
cat(p)
sum(p)
}
dloops(50,1000)
dloops <- function(n,nreps){
p=rep(0,2*n)
nloops=0
for (i in 1:nreps){
b <- sample(1:(2*n), 2 * n, replace = FALSE)
I=list()
for (k in 1:(2*n)){
l=1
s=b[k]
if (!s%in%I){
if (s==k){
I=append(I,s)
nloops=nloops+1
p[l]=p[l]+1
}
else{
while (s!=k){
l=l+1
I=append(I,s)
s=b[s]
}
nloops=nloops+1
p[l]=p[l]+1
}
}
}
}
p=p/sum(p)
return (p)
cat(p)
print(sum(p))
}
dloops(50,10000)
