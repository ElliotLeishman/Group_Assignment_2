#
strat_2 <-
#
strat_3 <-  sample(1:(2*n), 2 * n, replace = FALSE)
# Random choice can we assume that they will open the same box twice?
# Don't think we can.
strat_3
## Question 1
pone <- function(n, k, strategy, nreps){
## This function will basically just look to see if the number k is in strategy
## And then tun it nreps times and count how many times it succeeds for probs
## Select strategy
#  strategy <- sample(1:(2*n), 2 * n, replace = FALSE)
count = 0 # initialise counter
for (i in 0:nreps){
b <- sample(1:(2*n), 2 * n, replace = FALSE)
if (k %in% b){
count =+ 1
}
output(count)
}
}
pone(10,4,4,10)
output(count)
## Question 1
pone <- function(n, k, strategy, nreps){
## This function will basically just look to see if the number k is in strategy
## And then tun it nreps times and count how many times it succeeds for probs
## Select strategy
#  strategy <- sample(1:(2*n), 2 * n, replace = FALSE)
count = 0 # initialise counter
for (i in 0:nreps){
b <- sample(1:(2*n), 2 * n, replace = FALSE)
if (k %in% b){
count =+ 1
}
output(count)
}
}
pone(10,4,4,10)
return(count)
## Question 1
pone <- function(n, k, strategy, nreps){
## This function will basically just look to see if the number k is in strategy
## And then tun it nreps times and count how many times it succeeds for probs
## Select strategy
#  strategy <- sample(1:(2*n), 2 * n, replace = FALSE)
count = 0 # initialise counter
for (i in 0:nreps){
b <- sample(1:(2*n), 2 * n, replace = FALSE)
if (k %in% b){
count =+ 1
}
return(count)
}
}
## Question 1
pone <- function(n, k, strategy, nreps){
## This function will basically just look to see if the number k is in strategy
## And then tun it nreps times and count how many times it succeeds for probs
## Select strategy
#  strategy <- sample(1:(2*n), 2 * n, replace = FALSE)
count = 0 # initialise counter
for (i in 0:nreps){
b <- sample(1:(2*n), 2 * n, replace = FALSE)
if (k %in% b){
count =+ 1
}
return(count)
}
}pone(10,4,4,10)
pone(10,4,4,10)
pone(10,4,4,10)
strat_3
if (7 %in% strat_3){}
if (7 %in% strat_3){}
if (7 %in% strat_3){cat("yes")}
if (24 %in% strat_3){cat("yes")}
library(debug)
install.packages("debug")
install.packages("debug")
options(repos=c("https://markbravington.github.io/Rmvb-repo",
getOption( "repos")))
install.packages("debug")
library(debug)
library(debug)
mtrace(pone)
count = 0
for (i in 0:7){
b <- sample(1:(2*n), 2 * n, replace = FALSE)
if (k %in% b){
count =+ 1
for (i in 0:nreps){
b <- sample(1:(2*n), 2 * n, replace = FALSE)
if (k %in% b){
count =+ 1
for (i in 0:nreps){
b <- sample(1:(2*n), 2 * n, replace = FALSE)
if (k %in% b){
count =+ 1
for (i in 0:8){
b <- sample(1:(2*n), 2 * n, replace = FALSE)
if (10 %in% b){
count =+ 1
(i in 0:8){
(i in 0:8){
for (i in nreps){
b <- sample(1:(2*n), 2 * n, replace = FALSE)
if (k %in% b){
count =+ 1
}
return(count)
}
## Question 1
pone <- function(n, k, strategy, nreps){
## This function will basically just look to see if the number k is in strategy
## And then tun it nreps times and count how many times it succeeds for probs
## Select strategy
#  strategy <- sample(1:(2*n), 2 * n, replace = FALSE)
count = 0 # initialise counter
for (i in nreps){
b <- sample(1:(2*n), 2 * n, replace = FALSE)
if (k %in% b){
count =+ 1
}
return(count)
}
}
pone(10,4,4,10)
pone(10,4,4,10)
pone(10,4,4,10)
## Question 1
pone <- function(n, k, strategy, nreps){
## This function will basically just look to see if the number k is in strategy
## And then tun it nreps times and count how many times it succeeds for probs
## Select strategy
#  strategy <- sample(1:(2*n), 2 * n, replace = FALSE)
count = 0 # initialise counter
for (i in nreps){
b <- sample(1:(2*n), 2 * n, replace = FALSE)
if (k %in% b){
count = count + 1
}
return(count)
}
}
pone(10,4,4,10)
## Question 1
pone <- function(n, k, strategy, nreps){
## This function will basically just look to see if the number k is in strategy
## And then tun it nreps times and count how many times it succeeds for probs
## Select strategy
#  strategy <- sample(1:(2*n), 2 * n, replace = FALSE)
count = 0 # initialise counter
for (i in nreps){
b <- sample(1:(2*n), 2 * n, replace = FALSE);b
if (k %in% b){
count = count + 1
}
return(count)
}
}
pone(10,4,4,10)
b <- sample(1:(2*n), 2 * n, replace = FALSE);b
b <- sample(1:(2*n), 2 * n, replace = FALSE);b
b <- sample(1:(2*n), 2 * n, replace = FALSE);b
b <- sample(1:(2*n), 2 * n, replace = FALSE);b
b <- sample(1:(2*n), 2 * n, replace = FALSE);b
b <- sample(1:(2*n), 2 * n, replace = FALSE);b
b <- sample(1:(2*n), 2 * n, replace = FALSE);b
b <- sample(1:(2*n), 2 * n, replace = FALSE);b
b <- sample(1:(2*n), 2 * n, replace = FALSE);b
b <- sample(1:(2*n), 2 * n, replace = FALSE);b
b <- sample(1:(2*n),n, replace = FALSE);b
b <- sample(1:(2*n),n, replace = FALSE);b
b <- sample(1:(2*n),n, replace = FALSE);b
b <- sample(1:(2*n),n, replace = FALSE);b
class(b)
typeof(b)
list(b)
# Write a function to check if a number is in a vector
check <- function(vector, target){
if (target %in% vector){
cat(yes)
}
}
check([4,3,5,7,9,0],5)
check((4,3,5,7,9,0),5)
check(c(4,3,5,7,9,0),5)
# Write a function to check if a number is in a vector
check <- function(vector, target){
if (target %in% vector){
cat("yes")
}
}
check(c(4,3,5,7,9,0),5)
# Write a function to check if a number is in a vector
check <- function(vector, target){
if (target %in% vector){
cat("yes")
}else{cat("no")}
}
check(c(4,3,5,7,9,0),8)
# Write a function to check if a number is in a vector
check <- function(target){
b <- sample(1:(2*n),n, replace = FALSE);b
if (target %in% b){
cat("yes")
}else{cat("no")}
}
check(8)
# Write a function to check if a number is in a vector
check <- function(target){
b <- sample(1:(2*n),n, replace = FALSE);cat(b)
if (target %in% b){
cat("yes")
}else{cat("no")}
}
check(8)
# Write a function to check if a number is in a vector
check <- function(target){
b <- sample(1:(2*n),n, replace = FALSE);cat(b)
if (target %in% b){
cat("yes")
}else{cat("no")}
}
check(8)
# Write a function to check if a number is in a vector
check <- function(target){
b <- sample(1:(2*n),n, replace = FALSE);cat(b\n)
check(8)
# Write a function to check if a number is in a vector
check <- function(target){
b <- sample(1:(2*n),n, replace = FALSE);cat(b/n)
if (target %in% b){
cat("yes")
}else{cat("no")}
}
check(8)
# Write a function to check if a number is in a vector
check <- function(target){
b <- sample(1:(2*n),n, replace = FALSE);cat(b)
if (target %in% b){
cat("yes")
}else{cat("no")}
}
check(8)
# Write a function to check if a number is in a vector
check <- function(target){
b <- sample(1:(2*n),n, replace = FALSE);cat(b)
if (target %in% b){
cat("yes")
}else{cat("no")}
}
check(8)
# Write a function to check if a number is in a vector
check <- function(target){
for (i in 0:4){
b <- sample(1:(2*n),n, replace = FALSE);cat(b)
if (target %in% b){
cat("yes")
}else{cat("no")}
}
}
check(8)
## Question 1
pone <- function(n, k, nreps){
## This function will basically just look to see if the number k is in strategy
## And then tun it nreps times and count how many times it succeeds for probs
## Select strategy
#  strategy <- sample(1:(2*n),, replace = FALSE)
count = 0 # initialise counter
for (i in nreps){
b <- sample(1:(2*n),n, replace = FALSE);b
if (k %in% b){
count = count + 1
}
cat(count)
}
}
pone(10,4,10)
pone(10,4,10)
pone(10,4,10)
## Question 1
pone <- function(n, k, nreps){
## This function will basically just look to see if the number k is in strategy
## And then tun it nreps times and count how many times it succeeds for probs
## Select strategy
#  strategy <- sample(1:(2*n),, replace = FALSE)
count = 0 # initialise counter
for (i in nreps){
b <- sample(1:(2*n),n, replace = FALSE);b
if (target %in% b){
cat("yes")
}else{cat("no")}
cat(count)
}
}
# Write a function to check if a number is in a vector
check <- function(target){
for (i in 0:4){
b <- sample(1:(2*n),n, replace = FALSE);cat(b)
if (target %in% b){
cat("yes")
}else{cat("no")}
}
}
check(8)
pone(10,4,10)
## Question 1
pone <- function(n, k, nreps){
## This function will basically just look to see if the number k is in strategy
## And then tun it nreps times and count how many times it succeeds for probs
## Select strategy
#  strategy <- sample(1:(2*n),, replace = FALSE)
count = 0 # initialise counter
for (i in nreps){
b <- sample(1:(2*n),n, replace = FALSE);b
if (k %in% b){
cat("yes")
}else{cat("no")}
cat(count)
}
}
pone(10,4,10)
## Question 1
pone <- function(n, k, nreps){
## This function will basically just look to see if the number k is in strategy
## And then tun it nreps times and count how many times it succeeds for probs
## Select strategy
#  strategy <- sample(1:(2*n),, replace = FALSE)
count = 0 # initialise counter
for (i in 0:nreps){
b <- sample(1:(2*n),n, replace = FALSE);b
if (k %in% b){
cat("yes")
}else{cat("no")}
cat(count)
}
}
pone(10,4,10)
## Question 1
pone <- function(n, k, nreps){
## This function will basically just look to see if the number k is in strategy
## And then tun it nreps times and count how many times it succeeds for probs
## Select strategy
#  strategy <- sample(1:(2*n),, replace = FALSE)
count = 0 # initialise counter
for (i in 0:nreps){
b <- sample(1:(2*n),n, replace = FALSE)
if (k %in% b){
cat("yes")
count += 1
## Question 1
pone <- function(n, k, nreps){
## This function will basically just look to see if the number k is in strategy
## And then tun it nreps times and count how many times it succeeds for probs
## Select strategy
#  strategy <- sample(1:(2*n),, replace = FALSE)
count = 0 # initialise counter
for (i in 0:nreps){
b <- sample(1:(2*n),n, replace = FALSE)
if (k %in% b){
cat("yes")
count =+ 1
}else{cat("no")}
cat(count)
}
}
pone(10,4,10)
## Question 1
pone <- function(n, k, nreps){
## This function will basically just look to see if the number k is in strategy
## And then tun it nreps times and count how many times it succeeds for probs
## Select strategy
#  strategy <- sample(1:(2*n),, replace = FALSE)
count = 0 # initialise counter
for (i in 0:nreps){
b <- sample(1:(2*n),n, replace = FALSE);cat(b)
if (k %in% b){
cat("yes")
count =+ 1
}else{cat("no")}
cat(count)
}
}
pone(10,4,10)
## Question 1
pone <- function(n, k, nreps){
## This function will basically just look to see if the number k is in strategy
## And then tun it nreps times and count how many times it succeeds for probs
## Select strategy
#  strategy <- sample(1:(2*n),, replace = FALSE)
count = 0 # initialise counter
for (i in 0:nreps){
b <- sample(1:(2*n),n, replace = FALSE)
if (k %in% b){
cat("yes")
count <- count + 1
}else{cat("no")}
cat(count)
}
}
pone(10,4,10)
## Question 1
pone <- function(n, k, nreps){
## This function will basically just look to see if the number k is in strategy
## And then tun it nreps times and count how many times it succeeds for probs
## Select strategy
#  strategy <- sample(1:(2*n),, replace = FALSE)
count = 0 # initialise counter
for (i in 0:nreps){
b <- sample(1:(2*n),n, replace = FALSE)
if (k %in% b){
cat("yes")
count <- count + 1
}else{cat("no")}
}
cat(count)
}
pone(10,4,10)
## Question 1
pone <- function(n, k, nreps){
## This function will basically just look to see if the number k is in strategy
## And then tun it nreps times and count how many times it succeeds for probs
## Select strategy
#  strategy <- sample(1:(2*n),, replace = FALSE)
count = 0 # initialise counter
for (i in 0:nreps){
b <- sample(1:(2*n),n, replace = FALSE)
if (k %in% b){
count <- count + 1
}
}
cat(count)
}
pone(10,4,10)
pone(10,4,10)
pone(10,4,10)
pone(10,4,10)
pone(10,4,10)
pone(10,4,10)
for (i in 0:1000){}
for (i in 0:1000){x[i] <- pone(10,4,10)}
x[i] <- 0:1000
x <- 0:1000
for (i in 0:1000){x[i] <- pone(10,4,10)}
for (i in 0:1000){x[i] <- pone(10,4,10)}
for (i in 0:1000){x[i] <- pone(10,4,10)}
for (i in 0:1000){x[i] <- pone(10,4,10)}
for (i in 0:1000){x[i] <- pone(10,4,10)}
for (i in 0:1000){x[i] <- pone(10,4,10)}
for (i in 0:1000){x[i] <- pone(10,4,10)}
for (i in 0:1000){x[i] <- pone(10,4,10)}
x <- 0:1000
x <- 0:1000
x <- 0:1000
x <- 0:1000
x <- 0:1000
## Question 1
pone <- function(n, k, strategy, nreps){
count = 0 # initialise counter
for (i in 0:nreps){
b <- sample(1:(2*n),n, replace = FALSE)
if (k %in% b){
count <- count + 1
}
}
output(count)
}
pone(10,4,3,10)
## Question 1
pone <- function(n, k, strategy, nreps){
count = 0 # initialise counter
for (i in 0:nreps){
b <- sample(1:(2*n),n, replace = FALSE)
if (k %in% b){
count <- count + 1
}
}
return(count)
}
pone(10,4,3,10)
pone(10,4,3,10)
pone(10,4,3,10)
## Define the strategies
strat_1 <-
#
strat_2 <-
#
strat_3 <-  sample(1:(2*n), n, replace = FALSE)
## Define the strategies
strat_1
## Define the strategies
strat_1
## Define the strategies
strat_1
sample(1:(2*n), 2 * n, replace = FALSE)
sample(1:(2*n), 2 * n, replace = FALSE)
sample(1:(2*n), 2 * n, replace = FALSE)
# list of opened boxes
list <- 0:n
sample(1:(2*n), 2 * n, replace = FALSE)
k = 4
b <- sample(1:(2*n), 2 * n, replace = FALSE)
k = 4
# list of opened boxes
chosen <- 0:n
chosen[1] <- b[k]
for (i in 1:n){
chosen[i] <- b[i-1]
}
